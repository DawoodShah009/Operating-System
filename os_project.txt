;===================================================================================================
; printing ABCD.... 

; mov ah, 0x0e
; mov al, 65
; int 0x10



; loop:
;     inc al
;     cmp al, 'Z' + 1
;     je exit
;     int 0x10
;     jmp loop 

; exit:
;     jmp $
    
; times 510-($-$$) db 0
; db 0x55, 0xaa


;==============================================================================================
; printing ABCD.... with spaces
; mov ah, 0x0e
; mov al, 65
; int 0x10

; mov cl, al
; mov al, " "
; int 0x10



; loop:
;     mov al, cl
;     inc al
;     mov cl, al
;     cmp al, 'Z' + 1
;     je exit
;     int 0x10
;     mov al, " "
;     int 0x10
;     ; mov al, cl
;     jmp loop 

; exit:
; jmp $
    
; times 510-($-$$) db 0
; db 0x55, 0xaa
;===================================================================================================

; printing string stored in a variable------

; [org 0x7c00]    ; it is the address of the start of the address having the variable
; mov ah, 0x0e   ; when int 0x10 is called, it lookout for printing code(0x0e) in ah, if it is present, it will enter printing mode.
; mov bx, Var1

; printfunc:
;     mov al, [bx]    ; bx has the address where the value of var1 is stored. So, dereferencing it.
;     cmp al, 0  ; it will check the end of the string because end of the string is padded with 0.
;     je stop
;     int 0x10
;     inc bx
;     jmp printfunc
; stop:
; jmp $
; Var1:
;     db "Welcome my boy!", 0    ;padding the end of the string with the zero because the end of the string is always zero.
; times 510-($-$$) db 0
; db 0x55, 0xaa


;CHS addressing 

; [org 0x7c00]
; jmp $
; times 510-($-$$) db 0
; db 0x55, 0xaa
; times 512 db 'A'

; int 0x13
; ;;; what disk we want to read.....diskNum
; ;CHS address: C= 0, H = 0, S= 2
; ;how many sectors... 1
; ;where do we load them .... 0x7e00......     0x7e00 = 0x7c00(origin) + 256 base 10(boot sector size)


; mov ah, 2   ; ah must be 2.
; mov al, 1   ; al for how many sectors i want to read
; mov ch, 0  ;it is cylinder number which is 0
; mov cl, 2 ; it is the sector number 2 because sector 1 is filled with the code of boot loader.
; mov dh, 0  ; dh is the head number defined on line 86.
; mov dl, [diskNum]

; mov es, 0
; mov bx, 0x7e00
; int 0x13

; mov ah, 0x0e
; mov al, [0x7e00]
; int 0x10

; using flat memory model
; two segemnt code segment and data segment
; Code segment descriptor-----Base(starting location which we use is o), 
;Limit (size of the program and it is to be maximum, we will set it to 0xfffff (20 bits))
;present---- 1 for used segments
;privilage ---- 2 bit value 00 ('ring') for protection
;type = 1 if code or data segment
;Flags E {0,1}---
;-pres,priv,type = 1001
;2 sets of flags both are 4 bits long   --- ;
;Type flags (4-bits = ----)
;-----------( Code = conatains code or not if yes then 1 else 0,
;---------- (Conforming = can this be executed from lower privilage sector, since this is from higher so seting this to 0), 
;---------- (Readable = for reading constant set it to  1, not 0)
;-----------(Accesed = used by cpu managed by cpu..set 0 )
; so type flag = 1010
;Other flags (4-bits = ----)
;-----Granularity = 1 --limit*= 0x1000, 
;------- 32 bits: is this segment going to use 32 bits = yes=1
; next 2 bits are for (64bits, AVL) = (0,0) --- because we are not using them
; other flag = 1100

;;;==========  for Code Segment:
;-pres,priv,type = 1001
;type flag = 1010
; other flag = 1100

;;;==========  for Data Segment:
;-pres,priv,type = 1001
;type flag = 0010 (code = no, 2nd bit is now descriptor, it extends downward so 0, 3rd bit is now writable so for yes = 1)
; other flag = 1100



;;;===================Defining GDT in assembly
; db = defines bytes
; dw = defines words
; dd = defines double words


[org 0x7c00]
mov [BOOT_DISK], dl

CODE_SEG equ code_descriptor - GDT_Start
DATA_SEG equ data_descriptor - GDT_Start  ;equ is used to set constants

cli 
lgdt [GDT_Descriptor] ; load global descriptor table......
; change last bit of cr0 to 1
mov eax, cr0
or eax, 1
mov cr0, eax ; 32 bit mode....

; far jump (jump to other segment)
jmp CODE_SEG: start_protected_mode

jmp $

GDT_Start:
    null_descriptor:
        dd 0 ; 4 times 00000000
        dd 0 ; 4 times 00000000
    code_descriptor:
        dw 0xffff
        dw 0 ; 16 bits + 
        db 0 ; 8 bits = 24
        db 10011010 ; p,p,t, type flags
        db 11001111 ; other flags  + limit(last four bits)
        db 0 ; base last 8 bits 
    data_descriptor:
        dw 0xffff
        dw 0 ; 16 bits + 
        db 0 ; 8 bits = 24
        db 10010010 ; p,p,t, type flags
        db 11001111 ; other flags  + limit(last four bits)
        db 0 ; base last 8 bits 
GDT_End:

GDT_Descriptor:
    dw GDT_End - GDT_Start - 1  ; size
    dd GDT_Start                ; start


; CODE_SEG equ code_descriptor - GDT_Start
; DATA_SEG equ data_descriptor - GDT_Start  ;equ is used to set constants

; cli 
; lgdt [GDT_Descriptor]
; ; change last bit of cr0 to 1
; mov eax, cr0
; or eax, 1
; mov cr0, eax ; 32 bit mode....

; ; far jump (jump to other segment)
; jmp CODE_SEG: start_protected_mode



[bits 32]
start_protected_mode:
    ; write protected mode code here
    ; print character to screen (but how?) because we do not have bios now

    ; videoMemory = 0xb8000
    ; first byte: character
    ; second byte : colour
    mov al, 'A'
    mov ah, 0x0f ; white on black

    mov [0xb8000], ax  ; move to video memory location
    jmp $

BOOT_DISK: db 0

times 510-($-$$) db 0
dw 0xaa55

